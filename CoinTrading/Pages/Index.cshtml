@page "{text?}"
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@if (Model.Message != null)
{
    <div class="alert alert-primary" role="alert">
        @Model.Message
    </div>
}

@Html.Raw(HttpContext.Session.GetAlert())

<style>
    body {
        background-image: url('Images/bg.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    table#priceTable td.positive-change {
        color: green;
    }

    table#priceTable td.negative-change {
        color: red;
    }

    .coin-icon {
        width: 24px;
        height: 24px;
        margin-right: 8px;
    }
</style>
<div class="text-center">
    <img src="Images/logo.png" alt="CoinTrade Logo" class="img-fluid" style="max-width: 500px;">
    <h3>Trade your coins and become a millionaire!</h3>
    <table id="priceTable" class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Coin</th>
                <th>Price $</th>
                <th>24h Change</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be added here by JavaScript -->
        </tbody>
    </table>
</div>

@section Scripts {
    @Html.Raw(@"
    <script>
        const coins = [
            { symbol: 'btcusdt', name: 'BTC', icon: 'Images/btclogo.png' },
            { symbol: 'ethusdt', name: 'ETH', icon: 'Images/eth.png' },
            { symbol: 'bnbusdt', name: 'BNB', icon: 'Images/bnb.png' },
            { symbol: 'xrpusdt', name: 'XRP', icon: 'Images/xrp.png' },
            { symbol: 'dogeusdt', name: 'DOGE', icon: 'Images/doge.png' },
            { symbol: 'shibusdt', name: 'SHIBA INU', icon: 'Images/shiba.png' },
            // Add other coins as needed
        ];

        const symbols = coins.map(coin => coin.symbol);
        const ws = new WebSocket('wss://stream.binance.com:9443/ws');

        ws.onopen = () => {
            const params = symbols.map(symbol => `${symbol}@ticker`);
            const subscribeMessage = {
                method: 'SUBSCRIBE',
                params: params,
                id: 1
            };
            ws.send(JSON.stringify(subscribeMessage));
        };

        const coinData = {};

        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            coinData[data.s.toLowerCase()] = data;
            updateTable();
        };

        const updateTable = () => {
            const table = document.getElementById('priceTable').getElementsByTagName('tbody')[0];
            table.innerHTML = ''; // Clear the table

            coins.forEach(coin => {
                const data = coinData[coin.symbol];
                if (!data) return;

                let row = document.getElementById(data.s);

                if (!row) {
                    row = table.insertRow();
                    row.id = data.s;

                    const cellCoin = row.insertCell(0);
                    const cellPrice = row.insertCell(1);
                    const cellChange = row.insertCell(2);

                    cellCoin.innerHTML = `<img src='${coin.icon}' class='coin-icon' alt='${coin.name}'/>${coin.name}`;
                    cellPrice.innerHTML = parseFloat(data.c).toFixed(2);
                    cellChange.innerHTML = `${parseFloat(data.P).toFixed(2)}%`;
                    cellChange.className = parseFloat(data.P) >= 0 ? 'positive-change' : 'negative-change';
                } else {
                    row.cells[1].innerHTML = parseFloat(data.c).toFixed(2);
                    row.cells[2].innerHTML = `${parseFloat(data.P).toFixed(2)}%`;
                    row.cells[2].className = parseFloat(data.P) >= 0 ? 'positive-change' : 'negative-change';
                }
            });
        };
    </script>
    ")
}
